#include <iostream>
#include <exception>
using std::cout, std::endl;


/*
    Несмотря на то, что аргументом throw может быть любой тип,
    желательно использовать объекты специальных классов.

    В стандартной библиотеке exception объявлен базовый класс std::exception
    А также следующие наследники этого класса:

        std::runtime_error  - произвольная ошибка времени выполнения
        std::bad_alloc      - ошибка, возникающая если программа не может выделить
                              необходимую память с помощью new
        std::bad_cast       - ошибка, возникающая при dynamic_cast ссылок

        std::logic_error    - логические ошибки, такие как выход за границы массива,
                              разыменовывание nullptr, неправильный аргумент функции.
                              Хотя такие ошибки и можно обрабатывать с помощью исключений,
                              это не считается хорошей практикой.
                              Для таких ошибок лучше всего использовать assert
*/



int main()
{
    try
    {
        throw std::exception{};
    }
    catch (std::exception e)
    {
        cout << "Error: " << e.what() << endl;
    }
}


/*
    Задания:
        1)  Что напечатает данная программа?
        
        2)  Бросьте исключение типа std::runtime_error и поймайте его
            Исключения этого типа имеют конструктор от строки (описание ошибки)

*/
