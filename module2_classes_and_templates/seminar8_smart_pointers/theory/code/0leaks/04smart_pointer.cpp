/*
    Попытка решения проблем утечек памяти с помощью написания своего умного указателя.

    Давайте используем знания, полученные при изучении C++ и напишем класс, который будет освобождать память за нас.
    Назовём его SmartPointer, то есть умный указатель. Умный, потому что он сам будет освобождат память.

    Этот класс должен конструироваться от обычного указателя, который указывает память в куче и освобождать
    память в деструкторе.
    
    То есть следующий код не должен приводить к утечке памяти:

        SmartPointer<Cat> q = new Cat("Barsik");
        q->say();


    Задача:

        Напишите класс SmartPointer, который будет автоматичски освобождать память.
        Напишите у этого класса следующие методы:

            1)  Конструктор
            2)  Деструктор
            3)  Перегруженный оператор * (разыменование)
            4)  Перегруженный оператор -> (доступ к члену класса/структуры по указателю на объект класса/структуры)


        Могут возникнуть сложности с перегрузкой оператора -> 
        Такой оператор перегружается особым образом, а именно если a это объект некоторого класса с перегруженным ->
        то выражение   a->something    заменяется на    (a.operator->())->something.
        Таким образом перегруженный operator-> должен возвращать указатель, к которому стрелочка применима.
*/


#include <iostream>
#include <string>
using std::cout, std::endl;

// Специальный класс, который печатает на экран, когда вызывается его конструктор и деструктор
class Cat
{
private:
    std::string mName {};

public:
    Cat() : mName("None")  {cout << "Cat Default Constructor (" << mName << ")" << endl;}
    Cat(std::string name) : mName(name) {cout << "Cat Constructor (" << mName << ")" << endl;}
    void say() {cout << "Meow, I am " << mName << endl;}
    ~Cat()  {cout << "Cat Destructor (" << mName << ")" << endl;}
};









int main()
{
    // Этот код приведёт к утечке, если мы забудем delete
    Cat* p = new Cat("Alice");
    p->say();


    // Этот код использует умный указатель и автоматически освободит память
    SmartPointer<Cat> q = new Cat("Barsik");
    q->say();
} 