/*
    std::vector и обработка ошибок

    При работе с вектором могут возникнуть ошибки. В языке C++ стандартный способ обработки ошибок является механизм
    исключений. Вот какие исключения могут выброситься при работе с вектором:

        -   Если вы требуете для вектора столько памяти, какое оперерационная система не может предоставить
            в данный момент, то бросится исключение std::bad_alloc.
            Это может произойти в конструкторе вектора или в методах, которые могут выделять память, например
            в таких методах как push_back и insert.

        -   Метод at работает похоже на оператор [], но если вы вышли за границы то этот метод бросит исключение
            std::out_of_range.

                std::vector<int> v {10, 20, 30, 40, 50};

                cout << v[6] << endl;       // неопределённое поведение
                cout << v.at(6) << endl;    // бросит исключение, но медленне так как проверяет, что индекс вне границ


    Использование исключений для обработки ошибок позволяет писать код без неопределённого поведения, и при этом не 
    писать большое количество проверок на ошибки.
    Грубо говоря, если бы мы использовали не исключения а коды возврата, то нам бы пришлось писать что-то подобное:

        if (код_возврата == ERROR)
        {
            // что делаем в случае ошибки
        }

    после каждого вызова методов push_back, insert, и т. д. а также после каждого вызова конструктора.
    В результате код бы состоял более чем наполовину из всевозможных проверок.

    
    В данной программе, в функциях funca и funcb бросается исключение std::bad_alloc.
    В функции funcc бросается исключение std::out_of_range.
*/

#include <iostream>
#include <vector>
#include <string>
#include <stdexcept>
using std::cout, std::endl, std::size_t;


void funca()
{
    std::vector<int> v(1'000'000'000'000);
    cout << v.back() << endl;
}


void funcb()
{
    std::vector<int> v;

    for (size_t i = 0; i < 1'000'000'000'000; ++i)
    {
        v.push_back(i % 10);
    }

    size_t id;
    std::cin >> id;
    cout << v[id] << endl;
}


void funcc()
{
    std::vector<int> v {10, 20, 30, 40, 50};
    cout << v.at(6) << endl;
}


int main()
{
    try
    {
        funca();
    }
    catch(std::exception& e)
    {
        cout << e.what() << endl;
    }
}