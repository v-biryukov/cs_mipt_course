/*
    Конструктор

    Конструктор - это специальный метод, который вызывается при создании объекта.

    Конструктор  Book(const char aTitle[], float aPrice, int aPages)  принимает три аргумента и задаёт 
    этими аргументами поля класса, а также печатает на экран слово Constructor.

    Конструктор вызывается в строке  Book a = {"War and Peace", 1700, 900}.
    Эта строка похожа на обычную инициализацию структуры, поэтому может показаться, что в этой строке
    поэлементно задаются значения полей структуры Book, но это не то, что тут происходит.
    На самом же деле тут именно вызывается конструктор с соответствующими аргументами.
    В этом можно убедиться, если запустить эту программу. На экран должно дважды напечататься Constructor.

    !!  Правило:

        Если в структуре есть хотя бы один конструктор, то мы не можем создать объект такой структуры, напрямую 
        инициализировав поля, указав значения в фигурных скобочках. Вместо этого будет вызван соответствующий конструктор.

    Преимущество использования конструктора по сравнению с поэлементным заданием полей структуры состоит в том, 
    что программист может сам задать то, что будет происходить при создании объекта.


    Напоминание:
        Функция strcpy из библиотеки string.h языка C принимает на вход 2 строки и просто копирует 
        содержимое второй строки в первую строку.
*/

#include <iostream>
#include <cmath>
#include <cstring>
using std::cout, std::endl;


struct Book 
{
    char title[100];
    float price;
    int pages;

    Book(const char aTitle[], float aPrice, int aPages)
    {
        cout << "Constructor" << endl;
        std::strcpy(title, aTitle);
        price = aPrice;
        pages = aPages;
    }


    void print() const
    {
        std::cout << title << ", price = " << price << ", pages = " << pages << std::endl;
    }
};



int main() 
{
    Book a = {"War and Peace", 1700, 900};
    a.print();

    Book b = {"The Great Gatsby", 800, -600};
    b.print();

}


/*
    Задачи:



        1)  Предположим, что программист, работая с наши классом Book, ошибся в конструкторе и установил у книги 
            отрицательное количество страниц. Измените конструктор таким образом, чтобы программа не задавало 
            поле pages отрицательным. Вместо этого она должна задать это поле значением 0.


        2)  Убедите ещё раз, что в строках:

                Book a = {"War and Peace", 1700, 900};

            и

                Book b = {"The Great Gatsby", 800, -600};

            именно вызывается конструктор, а не задаются поля поэлементно. Для этого просто измените конструктор
            так, чтобы он задавал какие-то произвольные значения полям класса. Например, сделайте так, чтобы независимо
            от входных данных, конструктор задавал поля значениями {"Cats and Dogs", 100, 100}.
            Затем посмотрите что напечатается при печати переменных a и b.



        3)  Конструкторы можно перегружать также, как и обычные функции и методы. Добавьте новый конструктор, который
            не будет принимать никаких аргументов и будет создавать объект с полями равными  

                title: "Default"  price: 0   pages: 0

            Вызовите этот конструктор из main.
            Конструктор, который не принимает аргументов, называется конструктором по умолчанию (Default Construtor).



        4)  Конструкторы можно перегружать также, как и обычные функции и методы. Добавьте новый конструктор, который 
            будет принимать объект типа Book (по константной ссылке) и будет задавать поля текущего объекта, используя
            поля аргумента. Вызовите этот конструктор из main
            
            Конструктор, который создаёт объект, используя объект такого-же типа, называется конструктором копирования
            (Copy constructor).
*/