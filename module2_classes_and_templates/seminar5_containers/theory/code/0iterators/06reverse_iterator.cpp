/*
    Обратные итераторы

    Проход по контейнеру в обратном порядке с использованием обычных итераторов может быть затруднителен. 
    Используя обратные итераторы, это сделать гораздо проще. 

    У многих контейнеров определён тип обратного итератора reverse_iterator.
    Например, у вектора это std::vector<T>::reverse_iterator
    Также у этих контейнеров опеределены методы rbegin и rend.

        -   rbegin возвращает итератор на последний элемент
        -   rend возвращает итератор на фиктивный элемент, расположенный до первого

    Прибавление/вычитает для обратных итераторов работает наоборот:
    Перегруженный оператор ++ сдвигает обратный итератор на один элемент влево.
    Перегруженный оператор -- сдвигает обратный итератор на один элемент вправо.
    и т. д.
*/



#include <iostream>
#include <vector>
#include <list>
using std::cout, std::endl;

int main()
{
    std::list<int>   l {10, 20, 30, 40, 50, 60, 70, 80, 90, 100};
    std::vector<int> v {10, 20, 30, 40, 50, 60, 70, 80, 90, 100};

}


/*
    Задачи:

        1)  Напечатайте все элементы списка l в обратном порядке.

        2)  Напечатайте все элементы вектора v в обратном порядке через одного.
*/
