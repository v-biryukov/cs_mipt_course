/*
    Константные итераторы

    Если у нас есть константный вектор, то мы не сможем создать обычный итератор, указывающий на его элемент.

        const std::vector<int> v {10, 20, 30, 40, 50, 60, 70, 80, 90, 100};
        std::vector<int>::iterator it = v.begin(); // Error

    Ведь если мы бы могли это сделать, то мы бы могли изменить элемент вектора, используя этот итератор.
    Мы также не можем добавить const перед итератором, чтобы всё заработало:

        const std::vector<int> v {10, 20, 30, 40, 50, 60, 70, 80, 90, 100};
        const std::vector<int>::iterator it = v.begin(); // Error

    потому что в этом случае сам итератор будет неизменяем, но мы можем менять то на что он указывает.

    Внутри каждого контейнера определён специальный класс константного итератора const_iterator.
    Например, для вектора этот класс будет называться std::vector<T>::const_iterator.
    Используя этот итератор можно работать с константными контейнерами.

    Также у всех контейнеров опрделены методы cbegin и cend, аналоги begin и end, но возвращающие константные итераторы.
*/



#include <iostream>
#include <vector>
#include <list>
using std::cout, std::endl;

int main()
{
    const std::vector<int> v {10, 20, 30, 40, 50, 60, 70, 80, 90, 100};

    std::vector<int>::iterator it = v.begin();          // Error
    std::vector<int>::const_iterator it = v.cbegin();   // OK
}


/*
    Задачи:
        
        1)  Напечатайте все элементы константного вектора v

        2)  Напишите функцию sum, которая будет принимать список std::list<int> по константной ссылке
            и находить сумму всех элементов списка.
*/
