/*
    Контейнеры и итераторы STL

    Как мы выяснили, что для некоторых итераторов не определены многие операции.
    Например, к итератору связного списка мы не можем добавить целое число в отличии от итератора вектора.
    В теории мы могли бы написать данный оператор, но он бы работал бы за O(n).
    Поэтому в стандартной библиотеке C++ было принято решение не писать данные операторы чтобы уменьшить шанс
    некоректного использования этих контейнеров.

    Но если вам нужно очень нужно увеличить итератор связного списка на целое число, то вы можете использовать
    специальные функции:

        1)  std::advance(it, n)     -   продвигает итератор it на n элементов вперёд, если n положительное
                                                       или на abs(n) элементов назад, если n отрицательное
                                        если к итератору it нельзя добавлять числа, то просто n раз применяет
                                        оператор ++ (или оператор -- если n отрицательное)
                                        

        2)  std::distance(it1, it2) -   возвращает количество элементов между двумя итераторами
                                        если итераторы нельзя вычитать, то просто применяет оператор ++
                                        к итератору it1 пока он не сравняется с итератором it2 и таким образом
                                        находит расстояние.


        3)  std::next(it, n)        -   возвращает итератор, продвинутый на n элементов вперёд, если n положительное
                                                           или на abs(n) элементов назад, если n отрицательное
                                        можно вызвать с одним аргументом std::next(it). В этом случае вернёт итератор 
                                        на следующий элемент


        4)  std::prev(it, n)        -   то же самое, что и std::next, но только в обратную сторону

    !!  Нужно учитывать, что данные функции будут работать за O(n) для итераторов, которые не поддерживают 
        соответствующие операции.
*/



#include <iostream>
#include <list>
using std::cout, std::endl;

int main()
{
    std::list<int> l {10, 20, 30, 40, 50, 60, 70, 80, 90, 100};
    
    for (std::list<int>::iterator it = l.begin(); it != l.end(); ++it)
        cout << *it << ' ';
    cout << endl;



    std::list<int>::iterator it = l.begin();
    cout << *it << endl;

}


/*
    Задача:

        Добавьте число 5 к элементу 70 в связном списке l.
*/
