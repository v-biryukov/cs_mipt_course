/*
    Методы класса std::vector, которые мы прошли на предыдущем семинаре:

        size_t size()               -   возвращает количество элементов в векторе

        size_t capacity()           -   возвращает вместимость вектора (количество элементов, которые могут поместиться в векторе
                                        без перевыделения памяти).

        T& operator[](size_t i)     -   перегруженный оператор индексирования
                                        если выйти за границы, то будет неопределённое поведение


        T& at(size_t i)             -   возвращает ссылку на i-й элемент, также, как и operator[], 
                                        но если выйти за границы, то бросает исключение std::out_of_range.


        T& front()                  -   возвращает ссылку на первый элемент.
        T& back()                   -   возвращает ссылку на последний элемент.

        void push_back(const T& el) -   добавляет элемент в конец вектора (за O(1) в среднем)
        void pop_back()             -   удаляет элемент из конца вектора (за O(1))


        void operator=(const std::vector<T>&) - присваивает один вектор другому.


        reserve(n)  -   делает вместимость вектора достаточной, чтобы хранить n элементов типа T.
                        если вместимость вектора недостаточна для хранения n элементов, то выделяет больше памяти в куче.
                        (но не инициализирует её)
                        если вместимость вектора уже достаточна для хранения n элементов, то этот метод ничего не делает.

        resize(n)   -   делает размер вектора равным n. 
                        -   если n меньше текущего размера вектора, то корректно удаляет необходимое количество элементов 
                                из конца вектора.
                        -   если n равно текущему размеру вектора, то ничего не делает.
                        -   если размер вектора был меньше, чем n, то создаёт необходимое количесто элементов и инициализирует 
                                их с помощью value инициализации. Если необходимо, то увеличивает вместимость вектора.


        shrink_to_fit() -   делает вместимость вектора равным его размеру. При этом может происходить перевыделение памяти.
*/

#include <iostream>
#include <vector>
#include <string>
using std::cout, std::endl;

int main()
{
    std::vector<std::string> v {"Cat", "Dog", "Elephant", "Mouse"};

    for (int i = 0; i < v.size(); ++i)
        cout << v[i] << " ";
    cout << endl;


    v.push_back("Tiger");

    for (int i = 0; i < v.size(); ++i)
        cout << v[i] << " ";
    cout << endl;



    v.front() = "Lion";

    for (int i = 0; i < v.size(); ++i)
        cout << v[i] << " ";
    cout << endl;



    v.resize(3);

    for (int i = 0; i < v.size(); ++i)
        cout << v[i] << " ";
    cout << endl;
}
