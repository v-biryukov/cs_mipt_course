/*
    Нахождение минимального и максимального элемента в контейнерах

    Библиотека algorithm


        std::min_element(it1, it2) - находит минимальный элемент на диапазоне [it1, it2)
                                     и возвращает итератор на этот элемент.

        std::max_element(it1, it2) - находит максималный элемент на диапазоне [it1, it2)
                                     и возвращает итератор на этот элемент.
    
    Если минимальных или максимальных элементов несколько, то функции возвращают итератор на первый из них.
*/

#include <iostream>
#include <vector>
#include <algorithm>
using std::cout, std::endl;


int main()
{
    std::vector<int> v {81, 82, 78, 36, 39, 96, 11, 58, 15, 48};

    cout << *std::min_element(v.begin(), v.end()) << endl;
}


/*
    Задачи:

        1)  На вход подаётся n чисел. Напечатайте минимальный элемент и его индекс.
            Используйте функцию min_element.
        
                вход                                выход

                10                                  11 6
                81 82 78 36 39 96 11 58 15 48

                7                                   1 4
                8 2 5 4 1 6 4



        2)  На вход подаётся чётное количество чисел. Напечатайте минимальный элемент на первой половине и
            максимальный элемент второй половины.
        

                вход                                выход

                10                                  36 96
                81 82 78 36 39 96 11 58 15 48

                8                                   2 9
                7 2 8 4 1 9 4 2

                2                                   5 1
                5 1


        3)  На вход подаётся n чисел. Напечатайте максимальный элемент, который находится до минимального. 
            Предполагается, что минимальный элемент не является первым.
                
                вход                                выход
                
                10                                  96
                81 82 78 36 39 96 11 58 15 48

                10                                  82
                81 82 78 10 39 96 11 58 15 48
                
                7                                   8
                7 2 8 4 1 9 4

                7                                   2
                2 1 2 3 4 5 6
*/