/*
    lvalue и rvalue


    Откуда взялись такие странные имена для категории выражений?
    
    На самом деле понятия об lvalue и rvalue выражениях появилось ещё в первых версиях языка C (очень давно).
    Тогда их определение было очень просто: 

        rvalue - это выражения, которые могут стоять только справа от знака присваивания.
        lvalue - это выражения, которые могут стоять и слева и справа от знака присваивания.

    Но с тех пор язык C был сильно изменён, так что это определение сейчас не совсем верно.
    Например, были введены константы и массивы, которые являются lvalue, но не могут стоять слева от присваивания.


    Лучшее определение такое:

        lvalue  -   это выражение, которое даёт доступ к объекту, к которому можно получить доступ из других
                    мест программы.

        rvalue  -   это выражение, которое даёт доступ к объекту, к которому больше нигде в программе нельзя 
                    получить доступ.


    На самом деле это определение тоже не совсем верно.
    Дальше будет дано более точное определение lvalue и rvalue.
*/


#include <iostream>
#include <string>
using std::cout, std::endl;

int a = 100;

int f(int x)
{
    return x;
}

int& g(int& x)
{
    return x;
}

int main()
{
    int b = 200;
}


/*
    Задача: Какие следующие выражения являются lvalue, а какие rvalue?
    Переменные a, b и функции f, g определены выше.

        1)  a

        2)  b

        3)  a + b

        4)  f(a)

        5)  g(a)

        6)  g(b)

        7)  g(a) + 1

        8)  f(g(a))

        9)  123

        10) "Hello"
*/