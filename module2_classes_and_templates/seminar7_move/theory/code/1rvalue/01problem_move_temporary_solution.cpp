#include <iostream>
#include <string>
#include <vector>
using std::cout, std::endl;


void func(std::string s)
{
    cout << s << endl;
}

int main()
{
    std::vector<std::string> animals {"Axolotl", "Bear", "Cat", "Dog", "Eagle"};
    std::string* p = &animals[4];


    func(animals[0]);               // Копирование
    func(animals[0] + animals[1]);  // Перемещение
    func(*p);                       // Копирование
    func(animals[0].substr(1, 2));  // Перемещение
    func(*(&animals[0] + 2));       // Копирование
}


/*
    Пояснения:

        1)  animals[0] - это первый элемент массива animals. Мы не хотим его потерять после передачи в функцию func.
            По умолчанию он будет перемещаться.


        2)  animals[0] + animals[1] - это временный объект, получившийся в результате суммы первого и второго элемента
            массива. Так как это временный объект, нам его не жалко. Он будет перемещаться.


        3)  *p - это пятый элемент массива animals. Мы не хотим его потерять после передачи в функцию func.
            По умолчанию он будет перемещаться.


        4)  animals[0].substr(1, 2) - метод substr возвращает новую строку, которая является подстрокой строки animals[0].
            То есть это временный объект, соответственно он будет перемещаться.


        5)  *(&animals[0] + 2):

                &animals[0] - это адрес первого элемента массива.
                &animals[0] + 2 - это адрес третьего элемента массива.
                *(&animals[0] + 2) - это третий элемент массива.

            Мы не хотим потерять третий элемент массива после передачи в функцию func.
            Соответственно, в этом случае будет происходить копирование.
*/