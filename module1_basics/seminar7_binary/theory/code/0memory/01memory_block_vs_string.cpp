/*
    Кусок памяти и строка


    В прошлом файле мы научились работать с куском памяти произвольного размера.
    Например, чтобы выделить кусок памяти, размером в 5 байт, нужно создать массив, размером в 5 байт,
    состоящий из однобайтовых переменных вот так:

        unsigned char a[5];

    Переменные типа char также подойдут:

        char a[5];



    Как можно заметить, кусок памяти очень похож на строку. Это действительно так.  В языке C строки реализованы максимально 
    просто. Строка представляет собой массив байт, где каждый байт кодирует один символ согласно кодировке ASCII.
    К тому же, в кодировке ASCII используются только значения байта от 0 до 127, поэтому для хранения кода символа подойдёт 
    как тип char так и тип unsigned char.


    Есть всё же значительное отличие строки от куска памяти. В куске памяти каждый байт может иметь произвольное значение, 
    тогда как в строке обязательно должен быть хотя бы один нулевой байт, сигнализирующий о конце строки.
    Таким образом, строка в языке C - это кусок памяти, содержащий хотя бы один нулевой байт.


    Например, такой кусок памяти:

        char a[5] = {0x41, 0x42, 0x43, 0x44, 0x00};

    можно рассматривать как строку, так как в ней содержится байт со значением 0.
    А такой кусок памяти:

        char b[5] = {0x61, 0x62, 0x63, 0x64, 0x65};

    нельзя рассматривать как строку, так как байта со значением 0 в этом куске памяти нет.

*/

#include <stdio.h>


int main()
{
    char a[5] = {0x41, 0x42, 0x43, 0x44, 0x00};


    for (size_t i = 0; i < 5; ++i)
    {
        printf("%hhx ", a[i]);
    }
    printf("\n");


    printf("%s\n", a);




    char b[5] = {0x61, 0x62, 0x63, 0x64, 0x65};


    for (size_t i = 0; i < 5; ++i)
    {
        printf("%hhx ", b[i]);
    }
    printf("\n");


    printf("%s\n", b);
}



/*
    Задача:

        Что напечатает эта программа? Объясните результат.

*/