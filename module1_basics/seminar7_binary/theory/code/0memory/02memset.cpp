/*
    Функция memset

    
    Функция memset из библиотеки string.h позволяет задать значение байтов куска памяти:

        memset(void* p, int value, size_t n)

            p       -   адрес первого байта
            value   -   значение
            n       -   количество байт, значения которых нужно задать

        Функция задаст байты с адресами от  p  до  p + n - 1  значением value.
        Элементы массива могут быть любого типа.

    !!  Фукнция memset предназначена для задания байт одного массива или части одного массива.
        Если вы передадите ей такие аргументы, что при работе функция memset выйдет за границы массива,
        то это приведёт к неопределённому поведению.



    Например, если у нас есть кусок памяти:

        unsigned char a[SIZE];
    
    То задать все байты этого куска памяти значением 0x1a можно с помощью цикла:


        for (size_t i = 0; i < SIZE; ++i)
        {
            a[i] = 0x1a;
        }

    Но лучше использовать функцию memset:

        memset(a, 0x1a, SIZE);


        
    Замечание:

        В данном примере для задания размера массива вводится #define-константа SIZE.
        Эта константа должна иметь тип size_t.
        Чтобы этого добиться мы приводим литерал 100 типа int к типу size_t.
*/

#include <stdio.h>
#include <string.h>

#define SIZE ((size_t)100)

int main()
{
    unsigned char a[SIZE];

    for (size_t i = 0; i < SIZE; ++i)
    {
        a[i] = 0x1a;
    }


    for (size_t i = 0; i < SIZE; ++i)
    {
        printf("%hhx ", a[i]);
    }
    printf("\n");


    

    memset(a, 0x2b, SIZE);

    for (size_t i = 0; i < SIZE; ++i)
    {
        printf("%hhx ", a[i]);
    }
    printf("\n");
}



/*
    Задачи:

        1)  Задайте первые SIZE / 2 байт массива a значением 0xe3, а остальные байты значением 0xf4.
            Напечатайте этот массив.

        2)  Создайте строку, которая будет целиком состоять из 1000 символов 'a'.
            Напечатайте эту строку.
*/